#!/bin/bash
### BEGIN INIT INFO
# Provides:          airflow-scheduler
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Airflow at boot time
# Description:       Enable Airflow workflow manager web application
### END INIT INFO

{% if airflow_webserver_debug %}
debug="--debug"
{% endif %}
dir="{{ airflow_virtualenv ~ '/bin' }}"
pid_file="{{ airflow_scheduler_pid_file }}"
log_file="{{ airflow_scheduler_log_file }}"
cmd="env PATH=$dir:$PATH AIRFLOW_HOME={{ airflow_config.core.home }} airflow webserver --daemon --port {{ airflow_webserver_port }} --workers {{ airflow_webserver_workers }} --workerclass {{ airflow_webserver_worker_class }} --worker_timeout {{ airflow_webserver_worker_timeout }} --hostname {{ airflow_webserver_hostname }} --pid ${pid_file} --log-file ${log_file} ${debug}"
user="{{airflow_user_name}}"

name=`basename $0`
stdout_log="{{ airflow_log_path }}/$name.log"
stderr_log="{{ airflow_log_path }}/$name.err"

get_pid() {
    cat "$pid_file"
}

is_running() {
    [ -f "$pid_file" ] && ps `get_pid` > /dev/null 2>&1
}

case "$1" in
    start)
    if is_running; then
        echo "Already started"
    else
        echo "Starting $name"
        cd "$dir"
        if [ -z "$user" ]; then
            sudo $cmd >> "$stdout_log" 2>> "$stderr_log" &
        else
            sudo -u "$user" $cmd >> >(sudo -u "$user" tee "$stdout_log") 2>> >(sudo -u "$user" tee "$stderr_log" >&2) &
        fi
        echo $! > "$pid_file"
        if ! is_running; then
            echo "Unable to start, see $stdout_log and $stderr_log"
            exit 1
        fi
    fi
    ;;
    stop)
    if is_running; then
        echo -n "Stopping $name.."
        kill `get_pid`
        for i in {1..10}
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        echo

        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed"
            exit 1
        else
            echo "Stopped"
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
        fi
    else
        echo "Not running"
    fi
    ;;
    restart)
    $0 stop
    if is_running; then
        echo "Unable to stop, will not attempt to start"
        exit 1
    fi
    $0 start
    ;;
    status)
    if is_running; then
        echo "Running"
    else
        echo "Stopped"
        exit 1
    fi
    ;;
    *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
